Notes for OpenDict plugin developers (v0.1)
Martynas Jocius <mjoc@akl.lt>
2003-08-26

1. Introduction

   It is possible to write OpenDict plugin for any dictionary
   database. It only depends on tools which must be used with python
   (http://www.python.org) interpreter. It is important that basic
   plugin's code file must be a python module.

   OpenDict plugin's structure is strict, so plugin developers must
   carefully read the following instructions and applly them. If not,
   plugin will not work properly.

   Important: example text is case-sensitive.


2. Plugin's structure

   Plugin file is a simple ZIP archive. It contains all files and
   necessary files are in the top level. File "DESC" is necessary. The
   structure is the following:

	     name=<plugin's name to be displayed in the menu>
	     code=<python module file>
	     version=<plugin's version>
	     opendict=<required OpenDict version (format x.y.z)>
	     author=<the author>
	     about=<text about the plugin to the end of the file>

   Plugin file can contain any other files, they will be copied to the
   plugin's directory after install. 

   Example:
      Plugin file: TestPlugin.zip
      The contents:
	  DESC
	  test.py
	  dictionary.txt

      After plugin installation (extraction) these files are located
      at <OpenDict Home>/TestPlugin/ directory.

3. Code file structure

   Module file must have "Dictionary" class. 

   Necessary methods and arguments:

      __init__(self, home, font)
      home -- plugin home directory (where all these are located)
      font -- a tuple with 3 string variables: font encoding, font
      face and font size. 

      search(self, word)
      word -- a string with a word to be searched. 
      Returns a tuple (result, list, errno) where:
         "result" is a string with HTML code
	 "list" is a list with similar words to be placed on the words
	 list
         "errno" is an integer with error number. Error numbers:
	    0 -- OK
	    1 -- Not found
	    2 -- Dictionary error (some type of bug or unknown error)
	    3 -- Syntax error
	    4 -- Time out
	    5 -- Unsupported encoding

   Necessary variables:

      needsList = 1 # if plugin needs word list to be shown
      needsList = 0 # if plugin does not use word list

      "needsList" may be declared in the __init__ method as
      "self.needsList".


4. Simple sample module file

   class Dictionary:

      def __init__(self, plugin_home, font_style):

         self.font_style = font_style
	 self.home = plugin_home
	 self.needsList = 1

      def search(self, word):

         result = "<html><body>"
	 result += "Do you really want to what "
	 result += "<b>%s</b> means? " % word
	 result += "So do I. :)<br>""

	 # Font attributes are optional, plugin may have it's own
	 # static ones.
	 result += "Font style:<br>" \
	           "  Font encoding: %s<br>" \
                   "  Font face: %s<br>" \
                   "  Font size: "%s" \
                   % (self.font_style[0], self.font_style[1],
                      self.font_style[2])

	 result += "</body></html>"

	 return (result, ["just", "an", "example"], 1)


   This module file actually does nothing, but demonstrates the basic
   functionality. 
